<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BeyondSports.Core.Data.Provider</name>
    </assembly>
    <members>
        <member name="T:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler">
            <summary>
            The <see cref="T:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler"/> can be seen as the 'glue' between
            <see cref="T:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream"/> (which only deals with byte arrays) and
            a usable result that's translated into directly accessible data.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.TargetFrameRate">
            <summary>
            The target frame rate at which data should be sampled.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.Configuration">
            <summary>
            Configuration of this handler, in text.
            </summary>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.OnTrackableFrame">
            <summary>
            Delivers the received <see cref="T:BeyondSports.Core.Frames.Interfaces.ITrackableFrame"/>.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.Stream">
            <summary>
            This instance of <see cref="T:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream"/> is used to actively
            receive input data from any implemented stream source.
            </summary>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.OnStreamStateChanged">
            <summary>
            Delivers a <see cref="T:BeyondSports.Core.Data.Provider.Streams.Enums.StreamState"/> from the current <see cref="P:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.Stream"/>
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.FormatParser">
            <summary>
            This instance of <see cref="T:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatParser"/> is used
            to parse
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.UniqueMatchId">
            <summary>
            Unique ID that's automatically generated based on a match. This ID
            can be used to tell the difference between specific match streams.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.Start">
            <summary>
            Start with the actual execution of streaming the data from this
            implementation. It will do this in a background thread.
            </summary>
            <exception cref="T:BeyondSports.Core.Data.Provider.Streams.Exceptions.DataStreamException">Data stream could not be started.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Handlers.Interfaces.IDataHandler.Authenticate">
            <summary>
            Performs the initialisation routines for authorisation, if there is any.
            </summary>
            <returns>True on successful authentication. False otherwise.</returns>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Parsers.Exceptions.TrackableFormatParserException">
            <summary>
            Thrown when a <see cref="T:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatParser"/> implementation has a (un)parsing error.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatParser">
             <summary>
             Parses from a specific format type into our internal trackable object
             representation based on <see cref="T:BeyondSports.Core.Entities.Interfaces.ITrackableEntity"/>. Implementations
             of this interface can also parse back into the specific format.
            
             Examples of such specific formats could be the Tracab .DAT format, NHL,
             etc. Input or output can be a string or anything else, depending on the
             implementation.
             </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatParser.Parse(System.Byte[])">
            <summary>
            Parses from any native input (e.g. a readable Tracab .DAT line)
            to a newly allocated <see cref="T:BeyondSports.Core.Frames.Interfaces.ITrackableFrame"/>.
            </summary>
            <param name="nativeTrackableFrame">Native input trackable frame as a byte array.</param>
            <returns>A new <see cref="T:BeyondSports.Core.Frames.Interfaces.ITrackableFrame"/> with the parsed data.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="nativeTrackableFrame"/> is <see langword="null"/></exception>
            <exception cref="T:BeyondSports.Core.Data.Provider.Parsers.Exceptions.TrackableFormatParserException">Could not parse given <paramref name="nativeTrackableFrame"/>.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatParser.CanParse(System.Object)">
            <summary>
            Check whether the given native input can be parsed via this parser.
            </summary>
            <param name="nativeObject">
            Native input line, in either text or binary, depending on the
            type of implementation of this parser.
            </param>
            <returns>True if the native input can be parsed.</returns>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatUnparseSupport">
            <summary>
            Adds Unparse support for a <see cref="T:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatParser"/>.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatUnparseSupport.Format">
            <summary>
            The format used for unparsing, e.g. JsonL.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Parsers.Interfaces.ITrackableFormatUnparseSupport.Unparse(BeyondSports.Core.Frames.Interfaces.ITrackableFrame)">
            <summary>
            Unparses from a <see cref="T:BeyondSports.Core.Frames.Interfaces.ITrackableFrame"/> into the native input
            trackable frame as a byte array.
            </summary>
            <param name="trackableFrame">A generic <see cref="T:BeyondSports.Core.Frames.Interfaces.ITrackableFrame"/> with frame data.</param>
            <returns>A new native trackable frame.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackableFrame"/> is <see langword="null"/></exception>
            <exception cref="T:BeyondSports.Core.Data.Provider.Parsers.Exceptions.TrackableFormatParserException">Could not unparse given <paramref name="trackableFrame"/>.</exception>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.Cache.GenericCacheObject">
            <summary>
            Data holder for each part of data that comes in through the NHL API. We're
            adding it to a "holder" object to prevent changes in the NHL protocol from
            changing our offline NHL cache data files.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.Cache.GenericCacheTypeNameConverter">
            <summary>
            Type converter to make it possible to use this code in different
            assemblies and still be able to read cache files that were generated
            in another program with different namespaces.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.Cache.Utils.ByteArrayHelper">
            <summary>
            Utilities to convert between objects and byte arrays.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.Cache.Utils.ByteArrayHelper.ObjectToByteArray``1(``0)">
            <summary>
            Convert an object of type <typeparamref name="T"/> to a byte array.
            </summary>
            <param name="obj">Object to convert.</param>
            <returns>Converted byte array.</returns>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.Cache.Utils.ByteArrayHelper.ByteArrayToObject``1(System.Byte[])">
            <summary>
            Convert a byte array to an object of type <typeparamref name="T"/>.
            </summary>
            <param name="data">Byte array to convert.</param>
            <returns>Converted object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <see langword="null"/></exception>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.Cache.Utils.CacheOutput">
            <summary>
            Utility class to help set up cache related data.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.Cache.Utils.CacheOutput.GenerateFileName(System.String)">
            <summary>
            Returns the file name for a cache file, generated according
            to <paramref name="source"/>.
            </summary>
            <param name="source">
            Used for identification of the source where the cache is created from. All
            characters that cannot be used in a file name (spaces, diacritics, whitespace
            and other redundant characters) are removed.
            </param>
            <returns>Full output path for the cache</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>, empty or only white space.</exception>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.Enums.ConnectionState">
            <summary>
            Represents the connection state between the 3rd
            party provider and <see cref="T:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream"/>.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.ConnectionState.None">
            <summary>
            Default state.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.ConnectionState.Authenticating">
            <summary>
            Performing authentication.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.ConnectionState.Connecting">
            <summary>
            (Re-)Connecting to provider.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.ConnectionState.Connected">
            <summary>
            Connected to provider.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.ConnectionState.Receiving">
            <summary>
            Receiving data from the provider.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.ConnectionState.Closed">
            <summary>
            Connection is closed.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.Enums.StreamState">
            <summary>
            Represents the state of the current stream.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.StreamState.None">
            <summary>
            Default state.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.StreamState.Initializing">
            <summary>
            Necessary objects are being initialized to be able to stream.
            e.g. Creating an API client.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.StreamState.ReadyToStream">
            <summary>
            Initializing is completed and Stream is ready to stream.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.StreamState.Streaming">
            <summary>
            Stream is active and streaming data.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.Streams.Enums.StreamState.Stopped">
            <summary>
            Stream has stopped, e.g. completed, or stopped for another reason.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheHook">
            <summary>
            Implements a cache data hook for <see cref="T:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream"/>.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheHook.Write(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheHook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream">
            <summary>
            Implements a stream for cache files.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.AuthToken">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.OnDataReceived">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.State">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.ConnectionState">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.Start">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.Write(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.Authenticate">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.GenericApiCacheStream.Dispose">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataHook">
            <summary>
            Special hook to handle direct stream input.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataHook.Write(System.Byte[])">
            <summary>
            Writes the given data to any target.
            </summary>
            <param name="data">Raw input data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <see langword="null"/></exception>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream">
            <summary>
            All data comes in through an implementation for this interface.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream.AuthToken">
            <summary>
            The resulting token of any authorisation process.
            </summary>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream.OnDataReceived">
            <summary>
            Returns all data to be received from the implemented backend source.
            Data should always be 'complete' when you receive this event, so things
            like chunked data packets shouldn't be something you'd have to deal with.
            
            Please keep that in mind when adding new implementations of this, because
            the rest of this program assumes this behaviour.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream.State">
            <summary>
            The state of the current stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream.ConnectionState">
            <summary>
            The state of the underlying connection to the provider.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream.Authenticate">
            <summary>
            Performs the initialisation routines for authorisation, if there is any.
            </summary>
            <returns>True on successful authorisation. False otherwise.</returns>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream.Start">
            <summary>
            Start with the actual execution of streaming the data from this
            implementation. It will do this in a background thread.
            </summary>
            <exception cref="T:BeyondSports.Core.Data.Provider.Streams.Exceptions.DataStreamException">Data stream could not be started.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream.Write(System.Byte[])">
            <summary>
            Writes data to the stream, which is needed in some exotic situations (e.g. ChyronHego).
            </summary>
            <param name="data">Any data.</param>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.Utils.EntityUtils">
            <summary>
            Utility methods for helping out with internal tasks for <see cref="T:BeyondSports.Core.Entities.Interfaces.ITrackableEntity"/>.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.Utils.EntityUtils.ExtractEntityId(BeyondSports.Core.Entities.EntityTeamSide,System.Int32)">
            <summary>
            Temporary method to build a Tracab .DAT entity ID, which is
            needed in the Unity apps. Will be replaced once the internal
            core data format is available.
            </summary>
            <param name="entityTeamSide">Team side.</param>
            <param name="shirtNumber">Shirt number.</param>
            <returns>A newly composed entity ID, based on the team side and shirt number.</returns>
        </member>
    </members>
</doc>
