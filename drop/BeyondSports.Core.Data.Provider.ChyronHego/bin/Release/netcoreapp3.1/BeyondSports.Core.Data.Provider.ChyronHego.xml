<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BeyondSports.Core.Data.Provider.ChyronHego</name>
    </assembly>
    <members>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiCacheDataHandler">
             <summary>
             Sets up the connection code to handle data that was cached from the ChyronHego stream API via a stream.
            
             This basically extends <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler"/> with data
             backed by <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream"/>.
             </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiCacheDataHandler.Id">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiCacheDataHandler.SettingKeys">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiCacheDataHandler.Initialise(BeyondSports.Core.Plugins.Settings.Interfaces.IPluginSettings)">
            <inheritdoc/>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler">
            <summary>
            Sets up the connection code to handle data that is live from the ChyronHego stream API via a stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.Id">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.TargetFrameRate">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.Description">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.Configuration">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.UniqueMatchId">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.Stream">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.FormatParser">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.SettingKeys">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.OnTrackableFrame">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.OnStreamStateChanged">
            <inheritdoc/>>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.Initialise(BeyondSports.Core.Plugins.Settings.Interfaces.IPluginSettings)">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.Start">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.Authenticate">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.ChyronHegoApiDataHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler">
            <summary>
            Sets up the connection code to handle data that was received from a Tracab Tracking Router stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.Id">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.TargetFrameRate">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.Description">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.Configuration">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.OnTrackableFrame">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.OnStreamStateChanged">
            <inheritdoc/>>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.UniqueMatchId">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.Stream">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.FormatParser">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.SettingKeys">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.Initialise(BeyondSports.Core.Plugins.Settings.Interfaces.IPluginSettings)">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Handlers.TracabRouterDataHandler.Start">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.CurrentPhase">
             <summary>
             Info about phase of the game, like first or second half.
            
             This follows the (binary) stream API protocol to keep it
             a 1:1 match with the specs in there:
             https://beyondsports.atlassian.net/wiki/spaces/ENGINE/pages/255787009/ChyronHego+Stream+API
             </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData">
            <summary>
            Target properties for <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader"/> for the binary
            data from ChyronHego's binary stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData.Id">
            <summary>
            Denotes the type of dynamic data. Current supported data
            is listed in <seealso cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicDataId"/>.
            </summary>
        </member>
        <member name="F:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData._dynamicDataSize">
            <summary>
            Size of the <see cref="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData.DynamicDataJson"/> string.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData.DynamicDataJson">
            <summary>
            Dynamic data as Json string, depending on the value
            of<see cref="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData.Id"/>.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData.Serialize(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData.Deserialize(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData.GetParsedDynamicData">
            <summary>
            Parses available dynamic data into <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IDynamicDataType"/>.
            </summary>
            <returns>Parsed dynamic data.</returns>
            <exception cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.DynamicDataException">Instance does not contain valid dynamic data.</exception>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicDataId">
            <summary>
            Type of dynamic data. Can be anything related to the
            playing field or game mechanics.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.GameRunning">
             <summary>
             Is the game currently being played or not?
            
             This is not a boolean because it's following the (binary) stream
             API protocol to keep it a 1:1 match with the specs in there:
             https://beyondsports.atlassian.net/wiki/spaces/ENGINE/pages/255787009/ChyronHego+Stream+API
             </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader">
            <summary>
            First header for the binary data from ChyronHego's binary stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.VersionId">
            <summary>
            Version of the stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.GameId">
            <summary>
            Primary key of a game.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.FrameCount">
            <summary>
            Frame count of current <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader"/>.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.CurrentPhase">
            <summary>
            Info about phase of the game, like first or second half.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.GameRunning">
            <summary>
            Is the game currently being played or not?
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.Possession">
            <summary>
            Clicker data and ball possession.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.TargetHeaders">
            <summary>
            See <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader"/>.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.DynamicDatas">
            <summary>
            See <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.DynamicData"/>.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.Serialize(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader.Deserialize(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.Possession">
             <summary>
             Documentation says 'Bitwise', so that's what this
             is. The following code will return 1, 2, 4, 8, etc.
            
             See the binary protocol for more info:
             https://beyondsports.atlassian.net/wiki/spaces/ENGINE/pages/255787009/ChyronHego+Stream+API
             </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.TargetId">
            <summary>
            Internal ID of current target.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.TeamId">
            <summary>
            Which team this target contains data for.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.JerseyNumber">
            <summary>
            Jersey / shirt number of this target.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.XPosition">
            <summary>
            X position in centimeters.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.YPosition">
            <summary>
            Y position in centimeters.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.ZPosition">
            <summary>
            Z position in centimeters.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.Properties">
            <summary>
            See <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetProperties"/>.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.Serialize(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader.Deserialize(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetProperties">
            <summary>
            Target properties for <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetHeader"/> for the binary
            data from ChyronHego's binary stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetProperties.Id">
            <summary>
            Denotes the type of property. Current supported properties
            are listed in <seealso cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetPropertyId"/>.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetProperties.Data">
            <summary>
            Float or integer, depending on <see cref="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetProperties.Id"/>.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetProperties.Serialize(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetProperties.Deserialize(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetPropertyId">
            <summary>
            Type of a property. Can be anything related to the
            playing field or game mechanics.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.TargetTeam">
            <summary>
            Which team the data stands for.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.ClassIdType">
             <summary>
             Enumeration to specify request's class id.
            
             WARNING: Do not modify the enum names, because they match with those
                      from the API (including 'Unknown', which can be seen in action
                      when you don't send the message length first).
             </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.DynamicDataException">
            <summary>
            Represents the exception that is thrown when an exception occurred with the parsing of dynamic data.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IDynamicDataType">
            <summary>
            Interface to make it possible to treat the different types of Dynamic Data.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IRawSerializable">
             <summary>
             ISerializable from Microsoft had too many gotcha's (eg. there
             seems to be no way to (by default) serialize data without extra
             attributes). So this is a simpler version of it.
            
             Implement this in your to be serialized/deserialized objects.
             </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IRawSerializable.SizeInBytes">
            <summary>
            Since this isn't C/C++, we can't use sizeof (which is available
            in C#, but doesn't work well with reference types - also, the
            added padding would invalidate its use anyway). Instead, this
            specifies the total amount of bytes in the data saved within
            this class.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IRawSerializable.Serialize(System.IO.BinaryWriter)">
            <summary>
            Write data from the object that implements <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IRawSerializable"/>
            to the given <paramref name="writer"/>.
            </summary>
            <param name="writer">Object to write stream data to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <see langword="null"/></exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IRawSerializable.Deserialize(System.IO.BinaryReader)">
            <summary>
            Read data from the object that implements <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IRawSerializable"/>
            to the given <paramref name="reader"/>.
            </summary>
            <param name="reader">Object to read stream data from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <see langword="null"/></exception>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient">
            <summary>
            Interface for making it possible to test the stream API with
            a different implementation.
            </summary>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient.OnBinaryDataReady">
            <summary>
            Event to fire once new binary data has been processed and received.
            </summary>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient.OnASCIIDataReady">
            <summary>
            Event to fire once new ASCII data has been received.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient.ResponseStatus">
            <summary>
            Gets the response status of the last StreamAPI call.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient.Authenticate(System.Int32)">
            <summary>
            Since the stream API is public the external client needs to
            authenticate itself before a match can start to stream.
            </summary>
            <param name="userId">User ID from ChyronHego.</param>
            <exception cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.StreamApiClientException">Could not authenticate.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient.StartSubscription(System.Int32,System.Int32)">
            <summary>
            Starts a subscription to a game stream with <paramref name="gameId"/>
            as ID.
            </summary>
            <param name="gameId">Game ID for data to subscribe to.</param>
            <param name="vendorId">Vendor ID for data to subscribe to.</param>
            <exception cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.StreamApiClientException">The subscription could not be started.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient.EndSubscription(System.Int32)">
            <summary>
            Ends a subscription to a game that was previously subscribed to.
            </summary>
            <param name="gameId">Game ID for data to unsubscribe from.</param>
            <exception cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.StreamApiClientException">The subscription could not be ended.</exception>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.AuthenticationRequest">
            <summary>
            Model data for the authentication request in ChyronHego's
            stream API.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.AuthenticationRequest.UserId">
            <summary>
            ID for the the user. This will be provided by ChyronHego.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.AuthenticationRequest.TemporaryApiKey">
            <summary>
            Temporary key for the the user. Retrieved from the HTTP Rest API.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.AuthenticationResponse">
            <summary>
            Model data for the authentication response in ChyronHego's
            stream API.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.EndSubscriptionRequest">
            <summary>
            Model data to stop the subscription to a stream in
            ChyronHego's stream API.
            <para/>
            Format has changed since v1.8, more properties are
            necessary for the end subscription request.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.EndSubscriptionRequest.GameId">
            <summary>
            ID for the game the user wants to stream.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.EndSubscriptionResponse">
            <summary>
            Model data to retrieve after ending a subscription in ChyronHego's
            stream API.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.EndSubscriptionResponse.GameId">
            <summary>
            ID for the game the user wants to stream.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.HeartbeatResponse">
            <summary>
            Model data for the heartbeat response in ChyronHego's stream API.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionRequest">
            <summary>
            Model data to set up options for subscribing to a stream in
            ChyronHego's stream API.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionRequest.GameId">
            <summary>
            ID for the game the user wants to stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionRequest.VendorId">
            <summary>
            ID for the vendor the user wants to stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionRequest.GetLive">
            <summary>
            Specifies if the client want live or delay data.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionRequest.OutProtocol">
            <summary>
            Which Tracab Protocol to stream, see <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamProtocolType"/>.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionResponse">
            <summary>
            Model data to retrieve after starting a subscription in ChyronHego's
            stream API.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionResponse.GameId">
            <summary>
            ID for the game the user wants to stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionResponse.VendorId">
            <summary>
            ID for the vendor the user wants to stream.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionResponse.GetLive">
            <summary>
            Specifies if the client want live or delay data.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StartSubscriptionResponse.OutProtocol">
            <summary>
            Which Tracab Protocol to stream, see <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamProtocolType"/>.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamBaseModel">
            <summary>
            Base data for all other models in ChyronHego's stream API.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamBaseModel.PrepareRequest``1(``0,BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.ClassIdType)">
            <summary>
            Sets up internal API data for this request.
            </summary>
            <param name="request">Requested based on <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamBaseModel"/>.</param>
            <param name="classIdType">What kind of request it should become.</param>
            <typeparam name="T">Anything based on <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamBaseModel"/></typeparam>
            <returns>The enhanced request.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is <see langword="null"/></exception>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamResponseBaseModel">
            <summary>
            Base data for all response models in ChyronHego's stream API.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamResponseBaseModel.ResponseStatusId">
            <summary>
            ID for the status of the request. See <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamResponseStatus"/>.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamResponseBaseModel.ResponseStatus">
            <summary>
            String representation of the status of the request. See
            <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamResponseStatus"/> and <seealso cref="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamResponseBaseModel.ResponseStatusId"/>.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.TemporaryApiKeyModel">
            <summary>
            Model data for response from REST API request in ChyronHego's stream API.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.TemporaryApiKeyModel.TempApiKey">
            <summary>
            Temporary API key to be used when authenticating with ChyronHego's stream API.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.RestStreamApiClient">
             <summary>
             The ChyronHego stream API requires authentication through
             a safe connection. This separate REST client does that.
            
             It's used internally in StreamApiClient and should usually
             not be used by external users.
             </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.RestStreamApiClient.LastTemporaryKey">
            <summary>
            Contains the last known / generated key from the ChyronHego REST API.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.RestStreamApiClient.TemporaryKeyExpiredTime">
            <summary>
            Contains the time when the last generated key will expire.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.RestStreamApiClient.ApiCode">
            <summary>
            Api code to pass on to the ChyronHego stream API. This is
            delivered by the ChyronHego team.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.RestStreamApiClient.#ctor(System.String)">
            <summary>
            Returns a new instance of <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.RestStreamApiClient"/>.
            </summary>
            <param name="apiCode">Api code from ChyronHego.</param>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.RestStreamApiClient.GetUserTemporaryAPIKey">
            <summary>
            Generates a new temporary API key for use with <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient"/>.
            </summary>
            <returns>A temporary API key.</returns>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient">
             <summary>
             Sets up a connection to the ChyronHego stream API and manages
             the data that comes from it. Current methods are a 1:1 mapping
             with the API.
            
             Uses the ChyronHego REST API to perform the first authentication
             step and generate a temporary API key for use with the stream API.
             </summary>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.OnBinaryDataReady">
            <summary>
            Event to return data from the ChyronHego API. Modeled after
            the way DataController does it in the data enhancer library
            so that this code can be connected to the code in
            'BeyondSports.ChyronHego.Streamer' (you can find it in the
            same solution as this project) quickly.
            </summary>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.OnASCIIDataReady">
            <summary>
            Same as <see cref="E:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.OnBinaryDataReady"/>, but for ASCII data.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.#ctor(BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.TcpPacketDistributor,BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream,BeyondSports.Core.Services.Logging.ILogService)">
            <summary>
            Returns a new instance of <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient"/>.
            </summary>
            <param name="packetDistributor">Distributor to use when receiving data.</param>
            <param name="dataStream">Stream where data originates from.</param>
            <param name="logService">Service used for logging.</param>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.Authenticate(System.Int32)">
            <inheritdoc />
            <exception cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.StreamApiClientException">Could not authenticate.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.StartSubscription(System.Int32,System.Int32)">
             <summary>
             <inheritdoc /><para/>
             Before the stream can start the external client needs to specify which
             match to subscribe to. This is done through a JSON request and response.
             
             If the client gets a response that the stream has already started, the
             following data on that connection will be the actual data stream.
            
             On a successful subscription, data will be emitted through the
             <see cref="E:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.OnBinaryDataReady"/> event.
            
             For example: <paramref name="vendorId"/> could be 2 for Opta.
             </summary>
             <exception cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.StreamApiClientException">The subscription could not be started.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.EndSubscription(System.Int32)">
            <summary>
            <inheritdoc /><para/>
            If the client for some reason wants to end the subscription, i.e. to start
            another match subscription, a subscription ending is done through a JSON
            request and response.
            </summary>
            <exception cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.StreamApiClientException">The subscription could not be ended.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.HandleRequest``1(BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Models.StreamBaseModel,BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.ClassIdType)">
            <exception cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Exceptions.StreamApiClientException">Could not extract message body for given request.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.HandleBinaryData(System.Byte[])">
            <summary>
            Fires event for binary data.
            </summary>
            <param name="bytes">Extracted stream bytes.</param>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.HandleASCIIData(System.String)">
            <summary>
            Fires event for ASCII data.
            </summary>
            <param name="data">Extracted stream string (standard Tracab .dat line).</param>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient.Dispose">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamDataType">
            <summary>
            Enumeration to specify whether you're going to receive live or
            delayed data from <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamApiClient"/>.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamProtocolType">
             <summary>
             Enumeration to specify which protocol to use for streaming data.
            
             WARNING: Do not modify the enum names, because they match with those from the API.
             </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.StreamResponseStatus">
             <summary>
             Enumeration to describe the response status from the ChyronHego stream API.
            
             WARNING: Do not modify the enum names, because they match with those from the API.
             </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.BinaryPacketParser.FromBytes(System.Byte[])">
            <summary>
            Turns a byte array into a <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader"/>.
            </summary>
            <param name="data">Byte array.</param>
            <returns>A new instance of <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader"/>.</returns>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.BinaryPacketParser.GetDynamicData(BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader,BeyondSports.Core.Services.Logging.ILogService)">
            <summary>
            Returns all available <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IDynamicDataType"/> for this <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.BinaryFormat.Models.PacketHeader"/>.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.BinaryDataReadyEvent">
            <summary>
            Binary data event for <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient"/>.
            </summary>
            <param name="packetHeader">The header packet as sent by ChyronHego's stream API.</param>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.AsciiDataReadyEvent">
            <summary>
            ASCII data event for <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.API.Interfaces.IStreamApiClient"/>.
            </summary>
            <param name="tracabDatLine">The Tracab .DAT line as sent by ChyronHego's stream API.</param>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.TcpPacketDistributor">
             <summary>
             Distributes packet data to whoever wants it. There are two
             ways to get this data:
             
             1) Indirectly by using the <see cref="E:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.TcpPacketDistributor.OnPacket"/> event.
             2) Directly by using the asynchronous <see cref="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.TcpPacketDistributor.GetNextPacket"/> method.
            
             The distributor with packet cache works as follows:
            
             1) Connect to the output (event) from an <see cref="T:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream"/>.
             2) Whenever this event gets executed, update our internal data stream.
             3) The internal data stream keeps getting filled until a complete data object with length was found.
             4) After each event, a check is performed to see whether a full package can be extracted.
             5) If (4) is true, the package is added to an internal queue.
             6) When a packet is requested, it gets dequeued. It never gets data directly from the saved data stream buffer.
            
             With the way as described, the process is fully event based. You're allowed
             to use threads and loops in the <see cref="T:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream"/> object that gets
             passed to the constructor. The internal queue used in this distributor should
             be safe to use from multiple threads.
            
             If there's no event callback
             </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.TcpPacketDistributor.BuildPacketFromData(System.Byte[])">
            <summary>
            Returns a pre-formatted byte array with the given data. This is necessary
            because the ChyronHego API expects it.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.TcpPacketDistributor.HasNextPacket">
            <summary>
            Returns whether at least one new next packet is available for processing.
            </summary>
            <returns>True if a packet is available.</returns>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.TcpPacketDistributor.GetNextPacket">
            <summary>
            Returns the next available packet.
            </summary>
            <returns>Next packet with binary data.</returns>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Helpers.TcpPacketDistributor.GetNextPacket(System.TimeSpan)">
            <summary>
            Returns the next available packet, while waiting for
            a maximum period indicated by <paramref name="timeout"/>
            to see if any new packet data gets in if there's currently none. 
            </summary>
            <param name="timeout"></param>
            <returns>Next packet with binary data.</returns>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Network.TcpService">
            <summary>
            Provides a TCP connection and keeps underlying stream open.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Network.TcpService.ConnectToHost(System.String,System.Int32)">
            <summary>
            Set up the TCP client and save its network stream to prevent the
            associated UDP stream from getting closed (according to colleague).
            </summary>
            <param name="ip">The IP address of the remote host to which you intend to connect.</param>
            <param name="port">The port number of the remote host to which you intend to connect.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ip"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="port"/> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Internal.Network.TcpService.Dispose">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiCacheHook">
            <summary>
            Implements a cache data hook for <see cref="T:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream"/>.
            </summary>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiCacheHook.Write(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiCacheHook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream">
            <summary>
            Implements a stream for ChyronHego stream API live data connections.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.AuthToken">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.OnDataReceived">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.State">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.ConnectionState">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.StreamDataType">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.StreamProtocolType">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.GameId">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.VendorId">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.Start">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.Write(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.Authenticate">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoApiStream.Dispose">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream">
            <summary>
            Implements a stream for ChyronHego stream API cache files.
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.AuthToken">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.OnDataReceived">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.State">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.ConnectionState">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.StreamDataType">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.GameId">
            <inheritdoc/>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.VendorId">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.Start">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.Write(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.Authenticate">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.ChyronHegoCacheStream.Dispose">
            <inheritdoc />
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Streams.Interfaces.IStreamApiClientStream">
            <summary>
            Adds extra data for the ChyronHego streams in addition to <see cref="T:BeyondSports.Core.Data.Provider.Streams.Interfaces.IDataStream"/>.
            </summary>
        </member>
        <member name="T:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream">
            <summary>
            Streams soccer data from ChyronHego's Tracab Tracking Router program. The parameters
            for the constructor match those from the following documentation:
            
            https://beyondsports.atlassian.net/wiki/spaces/BEYON/pages/182190098/Tracab+Tracking+Router
            </summary>
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.AuthToken">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.OnDataReceived">
            <inheritdoc/>
        </member>
        <member name="E:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.State">
            <inheritdoc />
        </member>
        <member name="P:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.ConnectionState">
            <inheritdoc />
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.Start">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.OnUdpReceiveData(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.Write(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.Authenticate">
            <inheritdoc/>
        </member>
        <member name="M:BeyondSports.Core.Data.Provider.ChyronHego.Streams.TracabRouterStream.Dispose">
            <inheritdoc />
        </member>
    </members>
</doc>
